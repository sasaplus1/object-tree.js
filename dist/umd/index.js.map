{"version":3,"sources":["../../index.ts"],"sourcesContent":["/**\n * manage object by tree structure\n */\n\ntype Id = Symbol;\n\nexport class ObjectNode<T extends Object> {\n  #tree: ObjectTree<T>;\n  childNodes: ObjectNode<T>[];\n  id: Id;\n  parentNode: ObjectNode<T> | null;\n  value: T | null;\n\n  constructor({\n    tree,\n    childNodes,\n    parentNode,\n    value\n  }: { tree: ObjectTree<T> } & Pick<\n    ObjectNode<T>,\n    'childNodes' | 'parentNode' | 'value'\n  >) {\n    this.#tree = tree;\n    this.childNodes = childNodes;\n    this.id = Symbol();\n    this.parentNode = parentNode;\n    this.value = value;\n  }\n\n  after(...values: NonNullable<T>[]): void {\n    this.#insertAdjacent(1, ...values);\n  }\n\n  append(...values: NonNullable<T>[]): void {\n    const ons = values.map((value) => this.#addToObjectTree(value));\n\n    this.childNodes.push(...ons);\n  }\n\n  before(...values: NonNullable<T>[]): void {\n    this.#insertAdjacent(0, ...values);\n  }\n\n  contains(value: NonNullable<T>): boolean {\n    if (value === this.value) {\n      return true;\n    }\n\n    const { childNodes } = this;\n\n    for (let i = 0, len = childNodes.length; i < len; i += 1) {\n      if (childNodes[i].contains(value)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  get firstChild(): ObjectNode<T> | null {\n    const child = this.childNodes[0];\n\n    return child === undefined ? child : null;\n  }\n\n  getRootNode(): ObjectNode<T> {\n    return this.#tree.root;\n  }\n\n  get lastChild(): ObjectNode<T> | null {\n    const { childNodes } = this;\n    const child = childNodes[childNodes.length - 1];\n\n    return child === undefined ? child : null;\n  }\n\n  get parent(): ObjectNode<T> | null {\n    return this.parentNode;\n  }\n\n  hasChildNodes(): boolean {\n    return this.childNodes.length > 0;\n  }\n\n  insertBefore(newValue: NonNullable<T>, referenceValue: NonNullable<T>): void {\n    const { parentNode } = this;\n\n    if (parentNode === null) {\n      return;\n    }\n\n    const siblings = parentNode.childNodes;\n\n    const referenceNode = this.#tree.find(referenceValue);\n    const index = referenceNode !== null ? siblings.indexOf(referenceNode) : -1;\n\n    const on = this.#addToObjectTree(newValue);\n\n    siblings.splice(index === -1 ? 0 : index, 0, on);\n  }\n\n  get nextSibling(): ObjectNode<T> | null {\n    return this.#getSibling(1);\n  }\n\n  get previousSibling(): ObjectNode<T> | null {\n    return this.#getSibling(-1);\n  }\n\n  prepend(...values: NonNullable<T>[]): void {\n    const ons = values.map((value) => this.#addToObjectTree(value));\n\n    this.childNodes.unshift(...ons);\n  }\n\n  remove(): void {\n    const { childNodes, parentNode } = this;\n\n    this.#tree._delete(this);\n\n    for (let i = 0, len = childNodes.length; i < len; i += 1) {\n      childNodes[i].remove();\n    }\n\n    if (parentNode !== null) {\n      const index = parentNode.childNodes.indexOf(this);\n\n      if (index !== -1) {\n        parentNode.childNodes.splice(index, 1);\n      }\n    }\n\n    this.childNodes = [];\n    this.parentNode = null;\n    this.value = null;\n  }\n\n  // replaceChild\n  // replaceChildren\n  // replaceWith\n\n  #addToObjectTree(value: NonNullable<T>): ObjectNode<T> {\n    const on = new ObjectNode({\n      childNodes: [],\n      parentNode: this,\n      tree: this.#tree,\n      value\n    });\n\n    this.#tree._add(on);\n\n    return on;\n  }\n\n  #getSibling(direction: -1 | 1): ObjectNode<T> | null {\n    const { parentNode } = this;\n\n    if (parentNode === null) {\n      return null;\n    }\n\n    const siblings = parentNode.childNodes;\n\n    const index = siblings.indexOf(this);\n    const sibling = siblings[index + direction];\n\n    return sibling || null;\n  }\n\n  #insertAdjacent(direction: 0 | 1, ...values: NonNullable<T>[]): void {\n    const { parentNode } = this;\n\n    if (parentNode === null) {\n      return;\n    }\n\n    const siblings = parentNode.childNodes;\n    const index = siblings.indexOf(this);\n\n    if (index !== -1) {\n      const ons = values.map((value) => this.#addToObjectTree(value));\n\n      siblings.splice(index + direction, 0, ...ons);\n    }\n  }\n}\n\nexport class ObjectTree<T extends Object> {\n  #references = new Map<Id, ObjectNode<T>>();\n  #dereferences = new Map<T, Id>();\n\n  root = new ObjectNode<T>({\n    tree: this,\n    childNodes: [],\n    parentNode: null,\n    value: null\n  });\n\n  find(value: NonNullable<T>): ObjectNode<T> | null {\n    const id = this.#dereferences.get(value);\n\n    if (id === undefined) {\n      return null;\n    }\n\n    const on = this.#references.get(id);\n\n    return on !== undefined ? on : null;\n  }\n\n  has(value: NonNullable<T>): boolean {\n    return this.#dereferences.has(value);\n  }\n\n  _add(node: ObjectNode<T>): void {\n    const { id, value } = node;\n\n    if (value === null) {\n      return;\n    }\n\n    this.#references.set(id, node);\n    this.#dereferences.set(value, id);\n  }\n\n  _delete(node: ObjectNode<T>): boolean {\n    const { value } = node;\n\n    if (value === null) {\n      return false;\n    }\n\n    const id = this.#dereferences.get(value);\n\n    if (id === undefined) {\n      return false;\n    }\n\n    const on = this.#references.get(id);\n\n    if (on === undefined) {\n      return false;\n    }\n\n    this.#dereferences.delete(value);\n\n    return this.#references.delete(on.id);\n  }\n}\n"],"names":["ObjectNode","tree","constructor","childNodes","parentNode","value","id","Symbol","after","values","insertAdjacent","append","ons","map","addToObjectTree","push","before","contains","i","len","length","firstChild","child","undefined","getRootNode","root","lastChild","parent","hasChildNodes","insertBefore","newValue","referenceValue","siblings","referenceNode","find","index","indexOf","on","splice","nextSibling","getSibling","previousSibling","prepend","unshift","remove","_delete","_add","direction","sibling","ObjectTree","references","Map","dereferences","get","has","node","set","delete"],"mappings":"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"}